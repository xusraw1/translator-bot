from aiogram import Bot, Dispatcher, executor, types
from KEY import API
from deep_translator import GoogleTranslator
from aiogram.dispatcher.filters import Text
from keyboards import keyboard, keyboard1
bot = Bot(API)
dp = Dispatcher(bot)

lang_from = "ru"
lang_to = "en"

HELP = """
<b>–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?</b>
<i>–î–ª—è –Ω–∞—á–∞–ª–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</i> - /start
<i>–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫</i> - /setlang
<i>–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å...</i>
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞—à–ª–∏ –±–∞–≥(–æ—à–∏–±–∫—É), —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑—è—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞ @xmn2003.
"""

text = """<b>–ë–æ—Ç –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</b>\n
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 4 —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n
–°–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–æ–º–æ—â–∏ Python(Aiogram),–∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ deep-translator 1.11.1\n
–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –∞–¥–º–∏–Ω–æ–º - <b>@xmn2003</b>\n"""


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                         f"–ù–∞–ø–∏—à–∏—Ç–µ /setlang —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", reply_markup=keyboard1)


@dp.message_handler(Text(equals=['–ü–æ–º–æ—â—å']))
async def help(message: types.Message):
    await message.answer(HELP, parse_mode="HTML")


@dp.message_handler(Text(equals=['–í—ã–±—Ä–∞—Ç—å-—è–∑—ã–∫']))
async def choice_lang(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=keyboard)


@dp.message_handler(Text(equals=['–ü–µ—Ä–µ–≤–µ—Å—Ç–∏']))
async def translate_texts(message: types.Message):
    await message.answer(text=f"<b>–Ø–∑—ã–∫ –≤–≤–æ–¥–∞: {lang_to}\n"
                              f"–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: {lang_from}\n</b>"
                              f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? <i>/setlang</i>\n"
                              f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç üëá", parse_mode="HTML")


@dp.message_handler(Text(equals=['–û –±–æ—Ç–µ']))
async def choice_lang(message: types.Message):
    await message.answer(text=text, parse_mode="HTML")


@dp.message_handler(commands=['setlang'])
async def set_lang(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=keyboard)


@dp.callback_query_handler()
async def translator(callback: types.CallbackQuery):
    global lang_to
    global lang_from
    if callback.data == "ru/en":
        lang_to = callback.data[:2]
        lang_from = callback.data[3:]
        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç!", show_alert=True)
    elif callback.data == "ru/uz":
        lang_to = callback.data[:2]
        lang_from = callback.data[3:]
        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç!", show_alert=True)
    elif callback.data == "ru/zh-CN":
        lang_to = callback.data[:2]
        lang_from = callback.data[3:]
        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç!", show_alert=True)
    elif callback.data == "en/uz":
        lang_to = callback.data[:2]
        lang_from = callback.data[3:]
        await callback.answer("You have successfully changed the language, now enter your text!", show_alert=True)
    elif callback.data == "uz/en":
        lang_to = callback.data[:2]
        lang_from = callback.data[3:]
        await callback.answer("Siz tilni muvaffaqiyatli o'zgartirdingiz, endi matningizni kiriting!",
                              show_alert=True)
    elif callback.data == "en/ru":
        lang_to = callback.data[:2]
        lang_from = callback.data[3:]
        await callback.answer("You have successfully changed the language, now enter your text!", show_alert=True)

@dp.message_handler(content_types=['text'])
async def only_text(message: types.Message):
    try:
        text = message.text
        translated = GoogleTranslator(source=lang_to, target=lang_from)
        translated_text = translated.translate(text)
        await message.reply(
            text=f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> <i>{translated_text}</i> \n "
                 f"\n"
                 f"<b>–û—Ä–∏–≥–∏–Ω–∞–ª:</b> <u>{text}</u>",
            parse_mode="HTML"
        )

    except:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç!!!")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
